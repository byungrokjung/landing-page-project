const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function analyzeTrendData() {
  console.log('üîç Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ï§ë...');
  
  try {
    // 1. Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ÌòÑÌô©
    const { data: allData, error } = await supabase
      .from('ai_trend_news')
      .select('*')
      .limit(50);
      
    if (error) throw error;
    
    console.log(`üìä Ï¥ù ${allData.length}Í∞ú Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù`);
    console.log('üîç ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌïÑÎìú:', Object.keys(allData[0]));
    
    // 2. importance_score Î∂ÑÌè¨ Î∂ÑÏÑù
    const scores = allData.map(item => item.importance_score).filter(score => score != null);
    console.log('\nüìà Importance Score Î∂ÑÌè¨:');
    console.log('   ÌèâÍ∑†:', (scores.reduce((a, b) => a + b, 0) / scores.length).toFixed(3));
    console.log('   ÏµúÎåÄ:', Math.max(...scores));
    console.log('   ÏµúÏÜå:', Math.min(...scores));
    
    // 3. Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÌè¨
    const categories = {};
    allData.forEach(item => {
      const cat = item.category || 'Unknown';
      categories[cat] = (categories[cat] || 0) + 1;
    });
    console.log('\nüìÇ Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂ÑÌè¨:');
    Object.entries(categories).forEach(([cat, count]) => {
      console.log(`   ${cat}: ${count}Í∞ú`);
    });
    
    // 4. Ïã§Ï†ú AI Í¥ÄÎ†® ÌÇ§ÏõåÎìú Î∂ÑÏÑù
    const aiKeywords = ['ai', 'artificial intelligence', 'machine learning', 'gpt', 'chatgpt', 'robot', 'neural', 'deep learning'];
    const aiMatches = {};
    
    allData.forEach(item => {
      const title = (item.title || '').toLowerCase();
      const content = (item.content || '').toLowerCase();
      const text = title + ' ' + content;
      
      aiKeywords.forEach(keyword => {
        if (text.includes(keyword)) {
          if (!aiMatches[keyword]) aiMatches[keyword] = [];
          aiMatches[keyword].push(item.title);
        }
      });
    });
    
    console.log('\nü§ñ AI ÌÇ§ÏõåÎìú Îß§Ïπ≠:');
    Object.entries(aiMatches).forEach(([keyword, matches]) => {
      console.log(`   "${keyword}": ${matches.length}Í∞ú Îß§Ïπ≠`);
      if (matches.length > 0) {
        console.log(`      ÏòàÏãú: ${matches[0]}`);
      }
    });
    
    // 5. ÎÇ†ÏßúÎ≥Ñ Î∂ÑÌè¨
    const dateDistribution = {};
    allData.forEach(item => {
      const date = new Date(item.created_at).toLocaleDateString('ko-KR');
      dateDistribution[date] = (dateDistribution[date] || 0) + 1;
    });
    
    console.log('\nüìÖ ÎÇ†ÏßúÎ≥Ñ Î∂ÑÌè¨:');
    Object.entries(dateDistribution).slice(0, 5).forEach(([date, count]) => {
      console.log(`   ${date}: ${count}Í∞ú`);
    });
    
    // 6. Ìä∏Î†åÎìú Ï†êÏàò Í∏∞Î∞ò Ï†ïÎ†¨ ÌÖåÏä§Ìä∏
    const sortedByScore = allData
      .filter(item => item.importance_score)
      .sort((a, b) => b.importance_score - a.importance_score)
      .slice(0, 5);
      
    console.log('\n‚≠ê Ï§ëÏöîÎèÑ Ï†êÏàò Í∏∞Ï§Ä ÏÉÅÏúÑ 5Í∞ú:');
    sortedByScore.forEach((item, index) => {
      console.log(`   ${index + 1}. [${item.importance_score.toFixed(3)}] ${item.title}`);
    });
    
    // 7. AI Í¥ÄÎ†® Ìä∏Î†åÎìúÎßå ÌïÑÌÑ∞ÎßÅ + Ï†ïÎ†¨
    const aiTrends = allData.filter(item => {
      const title = (item.title || '').toLowerCase();
      const content = (item.content || '').toLowerCase();
      return aiKeywords.some(keyword => 
        title.includes(keyword) || content.includes(keyword)
      );
    }).sort((a, b) => (b.importance_score || 0) - (a.importance_score || 0));
    
    console.log(`\nüéØ AI Í¥ÄÎ†® Ìä∏Î†åÎìú ${aiTrends.length}Í∞ú (Ï§ëÏöîÎèÑÏàú):`);
    aiTrends.slice(0, 5).forEach((item, index) => {
      console.log(`   ${index + 1}. [${(item.importance_score || 0).toFixed(3)}] ${item.title}`);
    });
    
  } catch (error) {
    console.error('‚ùå Î∂ÑÏÑù Ïã§Ìå®:', error);
  }
}

analyzeTrendData();